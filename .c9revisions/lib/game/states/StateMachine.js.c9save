{"ts":1375106999365,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1375107109357,"patch":[[{"diffs":[[1,"/*global namespace*/\n\nvar states = namespace(\"Game.States\");\n\nstates.StateMachine = function(owner) {\n    this.owner = owner;\n};\n\nstates.StateMachine.prototype.update = function() {\n    if (this.globalState) this.globalState.execute();\n    if (this.currentState) this.currentState.execute();\n}"]],"start1":0,"start2":0,"length1":0,"length2":293}]],"length":293,"saved":false}
{"ts":1375107205887,"patch":[[{"diffs":[[0,"unction() {\n"],[1,"    //if a global state exists, call its execute method\n"],[0,"    if (this"]],"start1":170,"start2":170,"length1":24,"length2":80},{"diffs":[[0,"cute();\n"],[1,"    //same for the current state\n"],[0,"    if ("]],"start1":284,"start2":284,"length1":16,"length2":49},{"diffs":[[0,"ute();\n}"],[1,";\n\nstates.StateMachine.prototype.changeState = function(newState) {\n    this.previousState = this.currentState;\n    this.currentState.exit(this.owner);\n    this.currentState = newState;\n    this.currentState.enter(this.owner);\n};\n\n//change to a new state\n  void  ChangeState(State<entity_type>* pNewState)\n  {\n    assert(pNewState &&\n           \"<StateMachine::ChangeState>: trying to change to a null state\");\n \n    //keep a record of the previous state\n    m_pPreviousState = m_pCurrentState;\n \n    //call the exit method of the existing state\n    m_pCurrentState->Exit(m_pOwner);\n \n    //change state to the new state\n    m_pCurrentState = pNewState;\n \n    //call the entry method of the new state\n    m_pCurrentState->Enter(m_pOwner);\n  }"]],"start1":374,"start2":374,"length1":8,"length2":750}]],"length":1124,"saved":false}
{"ts":1375107226410,"patch":[[{"diffs":[[0,") {\n"],[-1,"    this.previousState = this.currentState;\n    this.currentState.exit(this.owner);\n    this.currentState = newState;\n    this.currentState.enter(this.owner);\n};\n\n//change to a new state\n  void  ChangeState(State<entity_type>* pNewState)\n  {\n    assert(pNewState &&\n           \"<StateMachine::ChangeState>: trying to change to a null state\");\n \n"],[0,"    "]],"start1":446,"start2":446,"length1":353,"length2":8},{"diffs":[[0,"    "],[-1,"m_pP"],[1,"this.p"],[0,"revi"]],"start1":492,"start2":492,"length1":12,"length2":14},{"diffs":[[0,"State = "],[-1,"m_pC"],[1,"this.c"],[0,"urrentSt"]],"start1":509,"start2":509,"length1":20,"length2":22},{"diffs":[[0,"rrentState;\n"],[-1," \n"],[0,"    //call t"]],"start1":524,"start2":524,"length1":26,"length2":24},{"diffs":[[0,"sting state\n    "],[-1,"m_pC"],[1,"this.c"],[0,"urrentState->Exi"]],"start1":573,"start2":573,"length1":36,"length2":38},{"diffs":[[0,"tate"],[-1,"->E"],[1,".e"],[0,"xit("],[-1,"m_pO"],[1,"this.o"],[0,"wner);\n"],[-1," \n"],[0,"    "]],"start1":602,"start2":602,"length1":28,"length2":27},{"diffs":[[0,"e new state\n    "],[-1,"m_pC"],[1,"this.c"],[0,"urrentState = pN"]],"start1":649,"start2":649,"length1":36,"length2":38},{"diffs":[[0,"e = "],[-1,"pN"],[1,"n"],[0,"ewSt"]],"start1":681,"start2":681,"length1":10,"length2":9},{"diffs":[[0,"te;\n"],[-1," \n"],[0,"    "]],"start1":691,"start2":691,"length1":10,"length2":8},{"diffs":[[0,"    "],[-1,"m_pC"],[1,"this.c"],[0,"urre"]],"start1":740,"start2":740,"length1":12,"length2":14},{"diffs":[[0,"tate"],[-1,"->E"],[1,".e"],[0,"nter("],[-1,"m_pO"],[1,"this.o"],[0,"wner);\n"],[-1,"  }"],[1,"};\n"]],"start1":757,"start2":757,"length1":26,"length2":27}]],"length":784,"saved":false}
{"ts":1375107257921,"patch":[[{"diffs":[[0,".owner);\n};\n"],[1,"\nstates.StateMachine.prototype.revertToPreviousState = function() {\n    this.changeState(this.previous);\n}"]],"start1":772,"start2":772,"length1":12,"length2":118}]],"length":890,"saved":false}
{"ts":1375107272907,"patch":[[{"diffs":[[0,"tion() {\n   "],[1," if (this.previousState)"],[0," this.change"]],"start1":843,"start2":843,"length1":24,"length2":48},{"diffs":[[0,"previous"],[1,"State"],[0,");\n}"]],"start1":902,"start2":902,"length1":12,"length2":17}]],"length":919,"saved":false}
{"ts":1375107367202,"patch":[[{"diffs":[[0,"ousState);\n}"],[1,";\n\nstates.StateMachine.prototype.isInState = function(state) {\n    if (this.currentState && this.currentState.name = state.name);\n};"]],"start1":907,"start2":907,"length1":12,"length2":144}]],"length":1051,"saved":false}
{"ts":1375107378548,"patch":[[{"diffs":[[0,"tate) {\n    "],[-1,"if ("],[1,"return "],[0,"this.current"]],"start1":974,"start2":974,"length1":28,"length2":31},{"diffs":[[0,"e.name ="],[1,"="],[0," state.n"]],"start1":1030,"start2":1030,"length1":16,"length2":17},{"diffs":[[0,"ate.name"],[-1,")"],[0,";\n};"]],"start1":1042,"start2":1042,"length1":13,"length2":12}]],"length":1054,"saved":false}
