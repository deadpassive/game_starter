{"ts":1373529425564,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function World(size) {\n    this.size = size;\n};"]],"start1":0,"start2":0,"length1":0,"length2":47}]],"length":47}
{"ts":1373531750632,"patch":[[{"diffs":[[1,"/*global World*/\n\n"],[0,"function"]],"start1":0,"start2":0,"length1":8,"length2":26}]],"length":65,"saved":false}
{"ts":1373531816232,"patch":[[{"diffs":[[-1,"/*global World*/\n\n"],[0,"func"]],"start1":0,"start2":0,"length1":22,"length2":4}]],"length":47,"saved":false}
{"contributors":[],"silentsave":false,"ts":1373616929482,"patch":[[{"diffs":[[1,"/*global Game*/\nGame.World = "],[0,"function"],[-1," World"],[0,"(siz"]],"start1":0,"start2":0,"length1":18,"length2":41}]],"length":70,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374480287778,"patch":[[{"diffs":[[0,"bal "],[-1,"Game*/\nGame.World = function(size) {\n    this.size = size;\n};"],[1,"namespace*/\n\nvar game = namespace(\"Game\");\nvar entities = namespace(\"Game.Entities\");\n\ngame.World = function(size) {\n    this.size = size;\n    this.tileSize = 20;\n    \n    this.tiles = [];\n    this.entities = [];\n    \n    this.entities[0] = new entities.Tree(\n            Math.floor(Math.random() * size), \n            Math.floor(Math.random() * size));\n    this.entities[1] = new entities.Store(\n            Math.floor(Math.random() * size), \n            Math.floor(Math.random() * size));\n    this.entities[2] = new entities.MovingEntity(\n            Math.floor(Math.random() * size), \n            Math.floor(Math.random() * size), this);\n    \n    for (var i = 0; i < size; i++) {\n        this.tiles[i] = [];\n        for (var j = 0; j < size; j++) {\n            this.tiles[i][j] = new game.Tile(i, j);\n        }\n    }\n};\n\ngame.World.prototype.draw = function(ctx, xOffset, yOffset) {\n    for (var x = 0; x < this.tiles.length; x++) {\n        for (var y = 0; y < this.tiles[x].length; y++) {\n            this.tiles[x][y].draw(ctx, xOffset, yOffset, this.tileSize);\n        }\n    }\n    for (var i = 0; i < this.entities.length; i++) {\n        this.entities[i].draw(ctx, xOffset, yOffset, this.tileSize);\n    }\n};\n\ngame.World.prototype.update = function(e) {\n    for (var i = 0; i < this.entities.length; i++) {\n        this.entities[i].update();\n    }\n};\n\ngame.World.prototype.isValidTile = function(x, y) {\n    return (x >= 0 && y >= 0 && x < this.size && y < this.size);\n}\n\ngame.World.prototype.getTile = function(x, y) {\n    if (this.isValidTile(x, y)) {\n        return this.tiles[x][y];\n    } else return null;\n}\n\ngame.World.prototype.zoomIn = function() {\n    this.tileSize += 5;\n}\n\ngame.World.prototype.zoomOut = function() {\n    this.tileSize = Math.max(this.tileSize -= 5, 5);\n}"]],"start1":5,"start2":5,"length1":65,"length2":1790}]],"length":1795,"saved":false}
{"contributors":[],"silentsave":false,"ts":1374493234245,"patch":[[{"diffs":[[0,"size);\n}"],[1,";"],[0,"\n"],[-1,""],[0,"\ngame.Wo"]],"start1":1475,"start2":1475,"length1":17,"length2":18},{"diffs":[[0," null;\n}"],[1,";\n\ngame.World.prototype.getNeighboursFor = function(tile) {\n    var neighbours = [];\n    for (var x = tile.x - 1; x <= tile.x + 1; x++) {\n        for (var y = tile.y - 1; x <= tile.y + 1; x++) {\n            var neighbour = this.getTile(x, y);\n            if (neighbour !== null && neighbour != tile) {\n                neighbours.push(neighbour);\n            }\n        }\n    }\n};"],[0,"\n\ngame.W"]],"start1":1618,"start2":1618,"length1":16,"length2":394},{"diffs":[[0," += 5;\n}"],[1,";"],[0,"\n\ngame.W"]],"start1":2066,"start2":2066,"length1":16,"length2":17},{"diffs":[[0," 5, 5);\n"],[-1,""],[0,"}"],[1,";"]],"start1":2166,"start2":2166,"length1":9,"length2":10}]],"length":2176,"saved":false}
