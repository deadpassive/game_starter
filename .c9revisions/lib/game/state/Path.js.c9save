{"ts":1375452266189,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1375452332931,"patch":[[{"diffs":[[1,"/*global namespace*/\nvar State = namespace(\"Path\");\n\nState.Path = (function() {\n    var $this = function() {\n        \n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":127}]],"length":127,"saved":false}
{"ts":1375452336583,"patch":[[{"diffs":[[0," \n    }\n"],[1,"    \n    return $this;\n"],[0,"});"]],"start1":116,"start2":116,"length1":11,"length2":34}]],"length":150,"saved":false}
{"ts":1375452437660,"patch":[[{"diffs":[[0,"\"Path\");"],[1,"\nvar GClass = namespace(\"GClass\");"],[0,"\n\nState."]],"start1":43,"start2":43,"length1":16,"length2":50},{"diffs":[[0," = function("],[-1,")"],[1,"start, end) {};\n    \n    GClass.extend(Object, $this,"],[0," {\n        \n"]],"start1":127,"start2":127,"length1":25,"length2":77},{"diffs":[[0,"  \n    }"],[1,");"],[0,"\n    \n  "]],"start1":201,"start2":201,"length1":16,"length2":18}]],"length":238,"saved":false}
{"ts":1375452440724,"patch":[[{"diffs":[[0,", end) {"],[1,"\n        \n    "],[0,"};\n    \n"]],"start1":144,"start2":144,"length1":16,"length2":30}]],"length":252,"saved":false}
{"ts":1375452457443,"patch":[[{"diffs":[[0,", {\n        "],[1,"isStillValid: function() {\n            // Determine whether the path is valid\n        }"],[0,"\n    });\n   "]],"start1":205,"start2":205,"length1":24,"length2":111}]],"length":339,"saved":false}
{"ts":1375452500150,"patch":[[{"diffs":[[0,") {\n        "],[1,"this.start = start;\n        this.end = end;"],[0,"\n    };\n    "]],"start1":149,"start2":149,"length1":24,"length2":67}]],"length":382,"saved":false}
{"ts":1375452514641,"patch":[[{"diffs":[[0,"this, {\n"],[1,"        findPath: function() {\n            \n        },\n        \n"],[0,"        "]],"start1":244,"start2":244,"length1":16,"length2":80}]],"length":446,"saved":false}
{"ts":1375452549276,"patch":[[{"diffs":[[0,"    "],[-1,"findPat"],[1,"\n        /**\n         * Find the shortest known path between the start and end.\n         */\n        findPath: function() {\n            \n        },\n        \n        refres"],[0,"h: f"]],"start1":256,"start2":256,"length1":15,"length2":178}]],"length":609,"saved":false}
{"ts":1375452601521,"patch":[[{"diffs":[[0,"    },\n        \n"],[1,"        /**\n         * Refresh the path based on new info.\n         */\n"],[0,"        refresh:"]],"start1":400,"start2":400,"length1":32,"length2":103}]],"length":680,"saved":false}
{"ts":1375452665700,"patch":[[{"diffs":[[0,"ion("],[-1,"start, end"],[1,"entity, goal"],[0,") {\n"]],"start1":135,"start2":135,"length1":18,"length2":20},{"diffs":[[0,"his."],[-1,"start = start"],[1,"entity = entity"],[0,";\n  "]],"start1":164,"start2":164,"length1":21,"length2":23},{"diffs":[[0,"his."],[-1,"end = end"],[1,"goal = goal"],[0,";\n  "]],"start1":194,"start2":194,"length1":17,"length2":19}]],"length":686,"saved":false}
{"ts":1375452679597,"patch":[[{"diffs":[[0,"= goal;\n"],[1,"        this.findPath();\n"],[0,"    };\n "]],"start1":203,"start2":203,"length1":16,"length2":41}]],"length":711,"saved":false}
{"ts":1375452746000,"patch":[[{"diffs":[[0,"Class\");"],[1,"\nvar Utils = namespace(\"Utils\");"],[0,"\n\nState."]],"start1":77,"start2":77,"length1":16,"length2":48},{"diffs":[[0,") {\n            "],[1,"var start = entity.tile;\n            var goal = this.target;\n            var closedset = [];\n            var openset = [start];\n            var came_from = new Utils.ToStringMap();\n            var g_score = new Utils.ToStringMap();\n            var f_score = new Utils.ToStringMap();\n            \n            g_score.put(start, 0);\n            f_score.put(start, g_score.get(start) + start.straightLineDistance(goal));\n            \n            while (openset.length > 0) {\n                var current = this.getLowestFScore(openset, f_score); //the node in openset with lowest f_score\n                if (current == goal)\n                    return this.reconstructPath(came_from, goal);\n                \n                // remove current from openset\n                var index = openset.indexOf(current);\n                openset.splice(index, 1);\n                // add current to closedset\n                closedset.push(current);\n                \n                // for each neightbour\n                var neighbours = entity.world.getNeighboursFor(current);\n                for (var i = 0; i < neighbours.length; i++) {\n                    var neighbour = neighbours[i];\n                    var currentGScore = g_score.get(current);\n                    //var tentative_g_score = currentGScore + this.getNeighbourDistance(current, neighbour);\n                    var tentative_g_score = currentGScore + 1;\n                    if (closedset.indexOf(neighbour) >= 0 && tentative_g_score >= g_score.get(neighbour))\n                        continue;\n                        \n                    if (openset.indexOf(neighbour) == -1 || tentative_g_score < g_score.get(neighbour)) {\n                        came_from.put(neighbour, current);\n                        g_score.put(neighbour, tentative_g_score);\n                        var neighbourGScore = g_score.get(neighbour);\n                        f_score.put(neighbour, neighbourGScore + neighbour.straightLineDistance(goal));\n                        if (openset.indexOf(neighbour) == -1) {\n                            openset.push(neighbour);\n                        }\n                    }\n                }\n            }\n            // return failure\n            return null;"],[0,"\n        },\n    "]],"start1":442,"start2":442,"length1":32,"length2":2262}]],"length":2973,"saved":false}
{"ts":1375452759876,"patch":[[{"diffs":[[0,"Utils\");"],[1,"\nvar Entity = namespace(\"Game.Entity\");"],[0,"\n\nState."]],"start1":109,"start2":109,"length1":16,"length2":55},{"diffs":[[0,"start = "],[-1,"e"],[1,"E"],[0,"ntity.ti"]],"start1":501,"start2":501,"length1":17,"length2":17}]],"length":3012,"saved":false}
{"ts":1375452769242,"patch":[[{"diffs":[[0,"s\");"],[-1,"\nvar Entity = namespace(\"Game.Entity\");"],[0,"\n\nSt"]],"start1":113,"start2":113,"length1":47,"length2":8},{"diffs":[[0,"t = "],[-1,"E"],[1,"this.e"],[0,"ntit"]],"start1":466,"start2":466,"length1":9,"length2":14}]],"length":2978,"saved":false}
{"ts":1375452773127,"patch":[[{"diffs":[[0,"his."],[-1,"target"],[1,"goal"],[0,";\n  "]],"start1":512,"start2":512,"length1":14,"length2":12}]],"length":2976,"saved":false}
{"ts":1375452781770,"patch":[[{"diffs":[[0,"bours = "],[1,"this."],[0,"entity.w"]],"start1":1474,"start2":1474,"length1":16,"length2":21}]],"length":2981,"saved":false}
{"ts":1375452890279,"patch":[[{"diffs":[[0,"ore + 1;"],[1,"  // TODO: why not se straightLineDistance for this?"],[0,"\n       "]],"start1":1865,"start2":1865,"length1":16,"length2":68}]],"length":3033,"saved":false}
{"ts":1375452898729,"patch":[[{"diffs":[[0,"why not "],[1,"u"],[0,"se strai"]],"start1":1884,"start2":1884,"length1":16,"length2":17}]],"length":3034,"saved":false}
{"ts":1375452963457,"patch":[[{"diffs":[[0,"    },\n        \n"],[1,"        // TODO: make private?\n        getLowestFScore: function(openset, f_score) {\n            var lowestSoFar;\n            var toReturn;\n            for (var i = 0; i < openset.length; i++) {\n                var tile = openset[i];\n                var score = f_score.get(tile);\n                if (!lowestSoFar || score < lowestSoFar) {\n                    lowestSoFar = score;\n                    toReturn = tile;\n                }\n            }\n            return toReturn;\n        },\n        \n"],[0,"        /**\n    "]],"start1":2754,"start2":2754,"length1":32,"length2":531}]],"length":3533,"saved":false}
{"ts":1375452984831,"patch":[[{"diffs":[[0,"    },\n        \n"],[1,"        reconstructPath: function(came_from, current_node) {\n            // if current node in came from\n            if (came_from.get(current_node)) {\n                var p = this.reconstructPath(came_from, came_from.get(current_node));\n                p.push(current_node);\n                return p;\n            } else {\n                return [current_node];\n            }\n        },\n        \n"],[0,"        /**\n    "]],"start1":3253,"start2":3253,"length1":32,"length2":428}]],"length":3929,"saved":false}
{"ts":1375453426035,"patch":[[{"diffs":[[0,"his, {\n        \n"],[1,"        nextTile: function() {\n            return this.path.shift();\n        },\n        \n"],[0,"        /**\n    "]],"start1":308,"start2":308,"length1":32,"length2":121}]],"length":4018,"saved":false}
{"ts":1375453454040,"patch":[[{"diffs":[[0,"s valid\n"],[1,"        },\n        \n        draw: function(ctx, xOffset, yOffset, tileSize) {\n            if (this.path && this.path.length > 0) {\n                var targetTile = this.path[this.path.length-1];\n                \n                var targetXPix = (tileSize * targetTile.x) + xOffset;\n                var targetYPix = (tileSize * targetTile.y) + yOffset;\n                \n                ctx.beginPath();\n                ctx.rect(targetXPix, targetYPix, tileSize, tileSize);\n                ctx.fillStyle = \"orange\";\n                ctx.fill();\n                ctx.lineWidth = 1;\n                ctx.strokeStyle = 'black';\n                ctx.stroke();\n            }\n"],[0,"        "]],"start1":3966,"start2":3966,"length1":16,"length2":680}]],"length":4682,"saved":false}
{"ts":1375453611219,"patch":[[{"diffs":[[0,"    },\n        \n"],[1,"        hasTiles: function() {\n            return (this.path && this.path.length > 0);\n        }\n        \n"],[0,"        /**\n    "]],"start1":397,"start2":397,"length1":32,"length2":138}]],"length":4788,"saved":false}
{"ts":1375453729608,"patch":[[{"diffs":[[0," > 0);\n        }"],[1,","],[0,"\n        \n      "]],"start1":493,"start2":493,"length1":32,"length2":33}]],"length":4789,"saved":false}
{"ts":1375453765170,"patch":[[{"diffs":[[0,"espace(\""],[-1,"Path"],[1,"State"],[0,"\");\nvar "]],"start1":36,"start2":36,"length1":20,"length2":21}]],"length":4790,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375862183044,"patch":[[{"diffs":[[0,"espace(\""],[1,"Game."],[0,"State\");"]],"start1":36,"start2":36,"length1":16,"length2":21},{"diffs":[[0,"oal;\n       "],[1," this.path ="],[0," this.findPa"]],"start1":244,"start2":244,"length1":24,"length2":36},{"diffs":[[0,".entity."],[-1,"t"],[1,"getT"],[0,"ile"],[1,"()"],[0,";\n      "]],"start1":688,"start2":688,"length1":20,"length2":25},{"diffs":[[0,"this;\n})"],[1,"()"],[0,";"]],"start1":4803,"start2":4803,"length1":9,"length2":11}]],"length":4814,"saved":false}
{"ts":1375863370112,"patch":[[{"diffs":[[0,"ity."],[-1,"w"],[1,"getW"],[0,"orld"],[1,"()"],[0,".get"]],"start1":1709,"start2":1709,"length1":13,"length2":18}]],"length":4819,"saved":false}
{"ts":1375863462169,"patch":[[{"diffs":[[0,"       this."],[1,"_"],[0,"entity = ent"]],"start1":194,"start2":194,"length1":24,"length2":25}]],"length":4820,"saved":false}
{"ts":1375863478218,"patch":[[{"diffs":[[0,"ar start = this."],[1,"_"],[0,"entity.getTile()"]],"start1":674,"start2":674,"length1":32,"length2":33},{"diffs":[[0," = this."],[1,"_"],[0,"entity.g"]],"start1":1700,"start2":1700,"length1":16,"length2":17}]],"length":4822,"saved":false}
{"ts":1375863491963,"patch":[[{"diffs":[[0,"       this."],[1,"_"],[0,"goal = goal;"]],"start1":225,"start2":225,"length1":24,"length2":25}]],"length":4823,"saved":false}
{"ts":1375863536585,"patch":[[{"diffs":[[0,"       this."],[1,"_"],[0,"path = this."]],"start1":252,"start2":252,"length1":24,"length2":25},{"diffs":[[0,"findPath();\n"],[-1,""],[0,"    };\n    \n"]],"start1":277,"start2":277,"length1":24,"length2":24},{"diffs":[[0,"return this."],[1,"_"],[0,"path.shift()"]],"start1":388,"start2":388,"length1":24,"length2":25},{"diffs":[[0,"eturn (this."],[1,"_"],[0,"path && this"]],"start1":479,"start2":479,"length1":24,"length2":25},{"diffs":[[0,"s._path && this."],[1,"_"],[0,"path.length > 0)"]],"start1":489,"start2":489,"length1":32,"length2":33},{"diffs":[[0,".getTile();\n"],[-1,""],[0,"            "]],"start1":702,"start2":702,"length1":24,"length2":24},{"diffs":[[0," = this."],[1,"_"],[0,"goal;\n  "]],"start1":734,"start2":734,"length1":16,"length2":17},{"diffs":[[0,"   if (this."],[1,"_"],[0,"path && this"]],"start1":4205,"start2":4205,"length1":24,"length2":25},{"diffs":[[0,"ath && this."],[1,"_"],[0,"path.length "]],"start1":4219,"start2":4219,"length1":24,"length2":25},{"diffs":[[0,"Tile = this."],[1,"_"],[0,"path[this.pa"]],"start1":4277,"start2":4277,"length1":24,"length2":25},{"diffs":[[0,"th[this."],[1,"_"],[0,"path.len"]],"start1":4292,"start2":4292,"length1":16,"length2":17}]],"length":4832,"saved":false}
