{"ts":1375344963718,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1375344973481,"patch":[[{"diffs":[[1,"\n\n// code for extending JS classes taken from \n// http://stackoverflow.com/questions/4152931/javascript-inheritance-call-super-constructor-or-use-prototype-chain\n// This is a constructor that is used to setup inheritance without\n// invoking the base's constructor. It does nothing, so it doesn't\n// create properties on the prototype like our previous example did\nfunction surrogateCtor() {}\n\nGClass.extend = function(base, sub) {\n  // Copy the prototype from the base to setup inheritance\n  surrogateCtor.prototype = base.prototype;\n  // Tricky huh?\n  sub.prototype = new surrogateCtor();\n  // Remember the constructor property was set wrong, let's fix it\n  sub.prototype.constructor = sub;\n}"]],"start1":0,"start2":0,"length1":0,"length2":693}]],"length":693,"saved":false}
{"ts":1375344997219,"patch":[[{"diffs":[[1,"/*global namespace*/\nvar game = namespace(\"Game\");"],[0,"\n\n// cod"]],"start1":0,"start2":0,"length1":8,"length2":58}]],"length":743,"saved":false}
{"ts":1375345003894,"patch":[[{"diffs":[[0,"var "],[-1,"game"],[1,"GClass"],[0," = n"]],"start1":21,"start2":21,"length1":12,"length2":14},{"diffs":[[0,"space(\"G"],[-1,"ame"],[1,"Class"],[0,"\");\n\n// "]],"start1":38,"start2":38,"length1":19,"length2":21}]],"length":747,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375345285081,"patch":[[{"diffs":[[0," sub"],[-1,") {\n  // Copy the prototype from the base to setup inheritance"],[1,", methods) {"],[0,"\n  s"]],"start1":477,"start2":477,"length1":70,"length2":20},{"diffs":[[0,"pe;\n"],[-1,"  // Tricky huh?\n"],[0,"  su"]],"start1":534,"start2":534,"length1":25,"length2":8},{"diffs":[[0,";\n  "],[-1,"// Remember the constructor property was set wrong, let's fix it\n  sub.prototype.constructor ="],[1,"sub.prototype.constructor = sub;\n  // Add a reference to the parent's prototype\n  sub.base = base.prototype;\n \n  // Copy the methods passed in to the prototype\n  for (var name in methods) {\n    sub.prototype[name] = methods[name];\n  }\n  // so we can define the constructor inline\n  return"],[0," sub;\n"],[1,"\n"],[0,"}"]],"start1":575,"start2":575,"length1":105,"length2":300}]],"length":875,"saved":false}
{"ts":1375345292185,"patch":[[{"diffs":[[0," sub;\n\n}"],[1,";"]],"start1":867,"start2":867,"length1":8,"length2":9}]],"length":876,"saved":false}
{"ts":1375345368293,"patch":[[{"diffs":[[0,"rn sub;\n"],[-1,"\n"],[0,"};"]],"start1":865,"start2":865,"length1":11,"length2":10}]],"length":875,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375346583131,"patch":[[{"diffs":[[0," sub;\n};"],[1,"\n\nGClass.GObject = (function() {\n    // Constructor\n    var $this = function() {};\n    return $this;\n})();"]],"start1":867,"start2":867,"length1":8,"length2":114}]],"length":981,"saved":false}
{"ts":1375346591430,"patch":[[{"diffs":[[0,"ub;\n};\n\n"],[1,"// Empty base class\n"],[0,"GClass.G"]],"start1":869,"start2":869,"length1":16,"length2":36}]],"length":1001,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375450000426,"patch":[[{"diffs":[[0,"\n};\n"],[-1,"\n// Empty base class\nGClass.GObject = (function() {\n    // Constructor\n    var $this = function() {};\n    return $this;\n})();"]],"start1":872,"start2":872,"length1":129,"length2":4}]],"length":876,"saved":false}
